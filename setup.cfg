[flake8]

# flake8 code - explanation - extension requirement
# =================================================
# ANN - annotations - flake8-annotations
# B,B9 - Bugbear - flake8-bugbear
# BLK - Black - flake8-black
# C - complexity - n/a
# D - docstrings - flake8-docstrings
# DAR - darglint (checks docstrings) - darglint
# E - pycodestyle errors - n/a
# F - pyflakes - n/a
# I - Import order - flake8-import-order
# N - PEP8 naming - pep8-naming
# W - pycodestyle warnings - n/a
select = ANN,B,B9,BLK,C,D,DAR,E,F,I,N,W

# E203 - whitespace before ':'
# E501 - line length (dealt with by bugbear)
# W503 - linebreak before binary op
# S101 - warns about assert being removed when compiled
# B305 - `.next()` is not a thing - metaflow false positive
# D104 - missing docstring in public package
# D100 - missing docstring in public module
# ANN101 - Missing type annotation for self
# E266 - FOR DOCUMENTATION PURPOSES SPECIFIC TO THIS REPO - allow ## comments
ignore = E203,E501,W503,B305,D100,D104,E266,ANN101

max-complexity = 10
max-line-length = 80
application-import-names = kuebiko,tests

# https://github.com/PyCQA/flake8-import-order/blob/master/tests/test_cases/complete_smarkets.py
import-order-style = smarkets

docstring-convention = google

## Don't run flake8 on notebooks folders - though it may be a good idea, particularly
## if you are unfamiliar with the styles being enforced as this gives you a fast
## feedback loop (ideally in your editor/IDE) to learn.
exclude=*/notebooks/,setup.py

## We don't need _require_ type annotations for tests, analysis, or pipeline
## but we do require them elsewhere, e.g. getters and utils.
## We don't need docstrings or warnings against assertions being compiled out
## in tests.
per-file-ignores =
    */tests/*:ANN,S,D
    kuebiko/analysis/*:ANN
    kuebiko/pipeline/*:ANN


[darglint] # Configuration for the darglint documentation linter

# Don't pester about parameters for a one-line docstring
strictness=short
docstring_style=google

[tool:pytest]
addopts = -vv -m "not flow"
markers =
    flow: Tests a flow (select with '"-m flow"')
norecursedirs=*/pkg  # Ignore symlinks used by flows using @pip (relies on pkg naming convention)
